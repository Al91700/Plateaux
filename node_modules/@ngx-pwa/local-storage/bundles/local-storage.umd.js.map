{"version":3,"file":"local-storage.umd.js","sources":["../../out-tsc/lib/src/service/databases/indexeddb-database.ts","../../out-tsc/lib/src/service/databases/localstorage-database.ts","../../out-tsc/lib/src/service/databases/mock-local-database.ts","../../out-tsc/lib/src/service/databases/local-database.ts","../../out-tsc/lib/src/service/validation/json-validator.ts","../../out-tsc/lib/src/service/lib.service.ts","../../out-tsc/lib/index.ts","../../out-tsc/lib/local-storage.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, fromEvent as fromEvent, of as of, throwError, race } from 'rxjs';\nimport { map, mergeMap, first } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDBDatabase implements LocalDatabase {\n\n  /**\n   * IndexedDB database name for local storage\n   */\n  protected readonly dbName = 'ngStorage';\n  /**\n   * IndexedDB object store name for local storage\n   */\n  protected readonly objectStoreName = 'localStorage';\n  /**\n   * IndexedDB key path name for local storage (where an item's key will be stored)\n   */\n  protected readonly keyPath = 'key';\n  /**\n   * IndexedDB data path name for local storage (where items' value will be stored)\n   */\n  protected readonly dataPath = 'value';\n  /**\n   * IndexedDB database connection, wrapped in a RxJS ReplaySubject to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected database: ReplaySubject<IDBDatabase>;\n\n  /**\n   * Connects to IndexedDB\n   */\n  constructor() {\n\n    /* Creating the RxJS ReplaySubject */\n    this.database = new ReplaySubject<IDBDatabase>();\n\n    /* Connecting to IndexedDB */\n    this.connect();\n\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string) {\n\n    /* Opening a trasaction and requesting the item in local storage */\n    return this.transaction().pipe(\n      map((transaction) => transaction.get(key)),\n      mergeMap((request) => {\n\n        /* Listening to the success event, and passing the item value if found, null otherwise */\n        const success = (fromEvent(request, 'success') as Observable<Event>).pipe(\n          map((event) => (event.target as IDBRequest).result),\n          map((result) => result && (this.dataPath in result) ? (result[this.dataPath] as T) : null)\n        );\n\n        /* Merging success and errors events and autoclosing the observable */\n        return (race(success, this.toErrorObservable(request, `getter`)) as Observable<T | null>)\n          .pipe(first());\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any) {\n\n    /* Storing null is not correctly supported by IndexedDB and unnecessary here */\n    if (data == null) {\n\n      return of(true);\n\n    }\n\n    /* Opening a transaction and checking if the item already exists in local storage */\n    return this.getItem(key).pipe(\n      map((existingData) => (existingData == null) ? 'add' : 'put'),\n      mergeMap((method) => {\n\n        /* Opening a transaction */\n        return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n          let request: IDBRequest;\n\n          /* Adding or updating local storage, based on previous checking */\n          switch (method) {\n            case 'add':\n              request = transaction.add({ [this.dataPath]: data }, key);\n              break;\n            case 'put':\n            default:\n              request = transaction.put({ [this.dataPath]: data }, key);\n              break;\n          }\n\n          /* Merging success (passing true) and error events and autoclosing the observable */\n          return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `setter`)) as Observable<boolean>)\n            .pipe(first());\n\n        }));\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string) {\n\n    /* Opening a transaction and checking if the item exists in local storage */\n    return this.getItem(key).pipe(\n      mergeMap((data) => {\n\n        /* If the item exists in local storage */\n        if (data != null) {\n\n          /* Opening a transaction */\n          return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n            /* Deleting the item in local storage */\n            const request = transaction.delete(key);\n\n            /* Merging success (passing true) and error events and autoclosing the observable */\n            return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `remover`)) as Observable<boolean>)\n              .pipe(first());\n\n          }));\n\n        }\n\n        /* Passing true if the item does not exist in local storage */\n        return of(true);\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear() {\n\n    /* Opening a transaction */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transaction) => {\n\n        /* Deleting all items from local storage */\n        const request = transaction.clear();\n\n        /* Merging success (passing true) and error events and autoclosing the observable */\n        return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `clearer`)) as Observable<boolean>)\n          .pipe(first());\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Connects to IndexedDB and creates the object store on first time\n   */\n  protected connect() {\n\n    /* Connecting to IndexedDB */\n    const request = indexedDB.open(this.dbName);\n\n    /* Listening the event fired on first connection, creating the object store for local storage */\n    (fromEvent(request, 'upgradeneeded') as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Getting the database connection */\n        const database = (event.target as IDBRequest).result as IDBDatabase;\n\n        /* Checking if the object store already exists, to avoid error */\n        if (!database.objectStoreNames.contains(this.objectStoreName)) {\n\n          /* Creating the object store for local storage */\n          database.createObjectStore(this.objectStoreName);\n\n        }\n\n      });\n\n    /* Listening the success event and converting to an RxJS Observable */\n    const success = fromEvent(request, 'success') as Observable<Event>;\n\n    /* Merging success and errors events */\n    (race(success, this.toErrorObservable(request, `connection`)) as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Storing the database connection for further access */\n        this.database.next((event.target as IDBRequest).result as IDBDatabase);\n\n      }, (error) => {\n\n        this.database.error(error as Error);\n\n      });\n\n  }\n\n  /**\n   * Opens an IndexedDB transaction and gets the local storage object store\n   * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n   * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable\n   */\n  protected transaction(mode: 'readonly' | 'readwrite' = 'readonly') {\n\n    /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */\n    return this.database\n      .pipe(map((database) => database.transaction([this.objectStoreName], mode).objectStore(this.objectStoreName)));\n\n  }\n\n  /**\n   * Transforms a IndexedDB success event in an RxJS Observable\n   * @param request The request to listen\n   * @returns A RxJS Observable with true value\n   */\n  protected toSuccessObservable(request: IDBRequest) {\n\n    /* Transforming a IndexedDB success event in an RxJS Observable with true value */\n    return (fromEvent(request, 'success') as Observable<Event>)\n      .pipe(map(() => true));\n\n  }\n\n  /**\n   * Transforms a IndexedDB error event in an RxJS ErrorObservable\n   * @param request The request to listen\n   * @param error Optionnal details about the error's origin\n   * @returns A RxJS ErrorObservable\n   */\n  protected toErrorObservable(request: IDBRequest, error = ``) {\n\n    /* Transforming a IndexedDB error event in an RxJS ErrorObservable */\n    return (fromEvent(request, 'error') as Observable<Event>)\n      .pipe(mergeMap((event) => throwError(new Error(`IndexedDB ${error} issue : ${request.error.message}.`))));\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageDatabase implements LocalDatabase {\n\n  /* Initializing native localStorage right now to be able to check its support on class instanciation */\n  protected localStorage = localStorage;\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string): Observable<T | null> {\n\n    const unparsedData = this.localStorage.getItem(key);\n    let parsedData: T | null = null;\n\n    if (unparsedData != null) {\n\n      try {\n        parsedData = JSON.parse(unparsedData);\n      } catch (error) {\n        return throwError(new Error(`Invalid data in localStorage.`));\n      }\n\n    }\n\n    return of(parsedData);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any) {\n\n    this.localStorage.setItem(key, JSON.stringify(data));\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string) {\n\n    this.localStorage.removeItem(key);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear() {\n\n    this.localStorage.clear();\n\n    return of(true);\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockLocalDatabase implements LocalDatabase {\n\n  protected localStorage = new Map<string, any>();\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n   getItem<T = any>(key: string) {\n\n    const rawData: T | null = this.localStorage.get(key);\n\n    return of((rawData !== undefined) ? rawData : null);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any) {\n\n    this.localStorage.set(key, data);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string) {\n\n    this.localStorage.delete(key);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear() {\n\n    this.localStorage.clear();\n\n    return of(true);\n\n  }\n\n}\n","import { Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport { IndexedDBDatabase } from './indexeddb-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { MockLocalDatabase } from './mock-local-database';\n\nexport function localDatabaseFactory(platformId: Object) {\n\n  if (isPlatformBrowser(platformId) && ('indexedDB' in window) && (indexedDB !== undefined) && (indexedDB !== null)) {\n\n    /* Try with IndexedDB in modern browsers */\n    return new IndexedDBDatabase();\n\n  } else if (isPlatformBrowser(platformId) && ('localStorage' in window) && (localStorage !== undefined) && (localStorage !== null)) {\n\n    /* Try with localStorage in old browsers (IE9) */\n    return new LocalStorageDatabase();\n\n  } else {\n\n    /* Fake database for server-side rendering (Universal) */\n    return new MockLocalDatabase();\n\n  }\n\n};\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: localDatabaseFactory,\n  deps: [PLATFORM_ID]\n})\nexport abstract class LocalDatabase {\n\n  abstract getItem<T = any>(key: string): Observable<T | null>;\n  abstract setItem(key: string, data: any): Observable<boolean>;\n  abstract removeItem(key: string): Observable<boolean>;\n  abstract clear(): Observable<boolean>;\n\n}\n","import { Injectable } from '@angular/core';\nimport { JSONSchema, JSONSchemaType } from './json-schema';\n\n/**\n * @todo Add other JSON Schema validation features\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONValidator {\n\n  /**\n   * Validate a JSON data against a JSON Schema\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema\n   * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid\n   */\n  validate(data: any, schema: JSONSchema): boolean {\n\n    if (!this.isObjectNotNull(schema)) {\n\n      throw new Error(`A schema must be an object (unlike spec, booleans are not supported to enforce strict types).`);\n\n    }\n\n    if (((!schema.hasOwnProperty('const') && !schema.hasOwnProperty('enum') && !schema.hasOwnProperty('type'))\n    || schema.type === 'array' || schema.type === 'object')\n    && !schema.hasOwnProperty('properties') && !schema.hasOwnProperty('items')) {\n\n      throw new Error(`Each value must have a 'type' or 'properties' or 'items' or 'const' or 'enum', to enforce strict types.`);\n\n    }\n\n    if (schema.hasOwnProperty('const') && (data !== schema.const)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('enum') && !this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('type') && !this.validateType(data, schema)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('items') && !this.validateItems(data, schema)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('properties')) {\n\n      if (schema.hasOwnProperty('required') && !this.validateRequired(data, schema)) {\n        return false;\n      }\n\n      if (!this.validateProperties(data, schema)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected isObjectNotNull(value: any): boolean {\n\n    return (value !== null) && (typeof value === 'object');\n\n  }\n\n  protected validateProperties(data: {}, schema: JSONSchema): boolean {\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    if (!schema.properties || !this.isObjectNotNull(schema.properties)) {\n\n      throw new Error(`'properties' must be a schema object.`);\n\n    }\n\n    /**\n     * Check if the object doesn't have more properties than expected\n     * Equivalent of additionalProperties: false\n     */\n    if (Object.keys(schema.properties).length !== Object.keys(data).length) {\n\n      return false;\n\n    }\n\n    /* Recursively validate all properties */\n    for (let property in schema.properties) {\n\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate(data[property], schema.properties[property])) {\n\n          return false;\n\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateRequired(data: {}, schema: JSONSchema): boolean {\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    if (!Array.isArray(schema.required)) {\n\n      throw new Error(`'required' field must be an array. Note that since JSON Schema draft 6, booleans are not supported anymore.`);\n\n    }\n\n    for (let requiredProp of schema.required) {\n\n      if (typeof requiredProp !== 'string') {\n\n        throw new Error(`'required' array must contain strings only.`);\n\n      }\n\n      /* Checks if the property is present in the schema 'properties' */\n      if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {\n\n        throw new Error(`'required' properties must be described in 'properties' too.`);\n\n      }\n\n      /* Checks if the property is present in the data */\n      if (!data.hasOwnProperty(requiredProp)) {\n\n        return false;\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateEnum(data: any, schema: JSONSchema): boolean {\n\n    if (!Array.isArray(schema.enum)) {\n\n      throw new Error(`'enum' must be an array.`);\n\n    }\n\n    /** @todo Move to ES2016 .includes() ? */\n    return (schema.enum.indexOf(data) !== -1);\n\n  }\n\n  protected validateType(data: any, schema: JSONSchema): boolean {\n\n    if (Array.isArray(schema.type)) {\n\n      return this.validateTypeList(data, schema);\n\n    }\n\n    if (typeof schema.type !== 'string') {\n\n      throw new Error(`'type' must be a string (arrays of types are not supported yet).`);\n\n    }\n\n    if ((schema.type === 'null') && (data !== null)) {\n\n      return false;\n\n    }\n\n    if (schema.type === 'string') {\n\n      return this.validateString(data, schema);\n\n    }\n\n    if ((schema.type === 'number') || (schema.type === 'integer')) {\n\n      return this.validateNumber(data, schema);\n\n    }\n\n    if ((schema.type === 'boolean') && (typeof data !== 'boolean')) {\n\n      return false;\n\n    }\n\n    if ((schema.type === 'object') && (typeof data !== 'object')) {\n\n      return false;\n\n    }\n\n    return true;\n\n  }\n\n\n  protected validateTypeList(data: any, schema: JSONSchema): boolean {\n\n    const types = schema.type as JSONSchemaType[];\n\n    const typesTests: boolean[] = [];\n\n    for (let type of types) {\n\n      typesTests.push(this.validateType(data, { type }));\n\n    }\n\n    return (typesTests.indexOf(true) !== -1);\n\n  }\n\n  protected validateItems(data: any[], schema: JSONSchema): boolean {\n\n    if (!Array.isArray(data)) {\n\n      return false;\n\n    }\n\n    if (schema.hasOwnProperty('maxItems')) {\n\n      if ((typeof schema.maxItems !== 'number') || !Number.isInteger(schema.maxItems) || schema.maxItems < 0) {\n\n        throw new Error(`'maxItems' must be a non-negative integer.`);\n\n      }\n\n      if (data.length > schema.maxItems) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minItems')) {\n\n      if ((typeof schema.minItems !== 'number') || !Number.isInteger(schema.minItems) || schema.minItems < 0) {\n\n        throw new Error(`'minItems' must be a non-negative integer.`);\n\n      }\n\n      if (data.length < schema.minItems) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('uniqueItems')) {\n\n      if (typeof schema.uniqueItems !== 'boolean') {\n\n        throw new Error(`'minItems' must be a boolean.`);\n\n      }\n\n      if (schema.uniqueItems) {\n\n        const dataSet = new Set(data);\n\n        if (data.length !== dataSet.size) {\n          return false;\n        }\n\n      }\n\n    }\n\n    if (Array.isArray(schema.items)) {\n\n      return this.validateItemsList(data, schema);\n\n    }\n\n    if (!schema.items || !this.isObjectNotNull(schema.items)) {\n\n      throw new Error(`'items' must be a schema object.`);\n\n    }\n\n    for (let value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateItemsList(data: any, schema: JSONSchema): boolean {\n\n    const items = schema.items as JSONSchema[];\n\n    if (data.length !== items.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < items.length; i += 1) {\n\n      if (!this.validate(data[i], items[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateString(data: any, schema: JSONSchema): boolean {\n\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('maxLength')) {\n\n      if ((typeof schema.maxLength !== 'number') || !Number.isInteger(schema.maxLength) || schema.maxLength < 0) {\n\n        throw new Error(`'maxLength' must be a non-negative integer.`);\n\n      }\n\n      if (data.length > schema.maxLength) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minLength')) {\n\n      if ((typeof schema.minLength !== 'number') || !Number.isInteger(schema.minLength) || schema.minLength < 0) {\n\n        throw new Error(`'minLength' must be a non-negative integer.`);\n\n      }\n\n      if (data.length < schema.minLength) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('pattern')) {\n\n      if (typeof schema.pattern !== 'string') {\n\n        throw new Error(`'pattern' must be a string with a valid RegExp.`);\n\n      }\n\n      const regularExpression = new RegExp(schema.pattern);\n\n      if (!regularExpression.test(data)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateNumber(data: any, schema: JSONSchema): boolean {\n\n    if (typeof data !== 'number') {\n      return false;\n    }\n\n    if ((schema.type === 'integer') && !Number.isInteger(data)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('multipleOf')) {\n\n      if ((typeof schema.multipleOf !== 'number') || schema.multipleOf <= 0) {\n\n        throw new Error(`'multipleOf' must be a number strictly greater than 0.`);\n\n      }\n\n      if (!Number.isInteger(data / schema.multipleOf)) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('maximum')) {\n\n      if (typeof schema.maximum !== 'number') {\n\n        throw new Error(`'maximum' must be a number.`);\n\n      }\n\n      if (data > schema.maximum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('exclusiveMaximum')) {\n\n      if (typeof schema.exclusiveMaximum !== 'number') {\n\n        throw new Error(`'exclusiveMaximum' must be a number.`);\n\n      }\n\n      if (data >= schema.exclusiveMaximum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minimum')) {\n\n      if (typeof schema.minimum !== 'number') {\n\n        throw new Error(`'minimum' must be a number.`);\n\n      }\n\n      if (data < schema.minimum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('exclusiveMinimum')) {\n\n      if (typeof schema.exclusiveMinimum !== 'number') {\n\n        throw new Error(`'exclusiveMinimum' must be a number.`);\n\n      }\n\n      if (data <= schema.exclusiveMinimum) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { LocalDatabase } from './databases/local-database';\nimport { JSONSchema } from './validation/json-schema';\nimport { JSONValidator } from './validation/json-validator';\n\nexport interface LSGetItemOptions {\n  schema?: JSONSchema | null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorage {\n\n  protected readonly getItemOptionsDefault = {\n    schema: null\n  };\n\n  constructor(protected database: LocalDatabase, protected jsonValidator: JSONValidator) {}\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string, options: LSGetItemOptions = this.getItemOptionsDefault): Observable<T | null> {\n\n    return this.database.getItem<T>(key).pipe(\n\n      /* Validate data upon a json schema if requested */\n      mergeMap((data) => {\n\n        if (options.schema && data !== null) {\n\n          let validation = true;\n\n          try {\n            validation = this.jsonValidator.validate(data, options.schema);\n          } catch (error) {\n            return throwError(error);\n          }\n\n          if (!validation) {\n            return throwError(new Error(`JSON invalid`));\n          }\n\n        }\n\n        return of(data);\n\n      }));\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any): Observable<boolean> {\n\n    return this.database.setItem(key, data);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string): Observable<boolean> {\n\n    return this.database.removeItem(key);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear(): Observable<boolean> {\n\n    return this.database.clear();\n\n  }\n\n  /**\n   * Sets an item in local storage, and auto-subscribes\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   */\n  setItemSubscribe(key: string, data: any): void {\n\n    this.setItem(key, data).subscribe(() => {}, () => {});\n\n  }\n\n  /**\n   * Deletes an item in local storage, and auto-subscribes\n   * @param key The item's key\n   */\n   removeItemSubscribe(key: string): void {\n\n    this.removeItem(key).subscribe(() => {}, () => {});\n\n  }\n\n  /** Deletes all items from local storage, and auto-subscribes */\n  clearSubscribe(): void {\n\n    this.clear().subscribe(() => {}, () => {});\n\n  }\n\n}\n","export { JSONSchema, JSONSchemaType } from './src/service/validation/json-schema';\nexport { LocalDatabase } from './src/service/databases/local-database';\nexport { IndexedDBDatabase } from './src/service/databases/indexeddb-database';\nexport { LocalStorageDatabase } from './src/service/databases/localstorage-database';\nexport { MockLocalDatabase } from './src/service/databases/mock-local-database';\nexport { JSONValidator } from './src/service/validation/json-validator';\nexport { LSGetItemOptions, LocalStorage } from './src/service/lib.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {localDatabaseFactory as ɵa} from './src/service/databases/local-database';"],"names":["ReplaySubject","map","mergeMap","fromEvent","race","first","of","throwError","Injectable","isPlatformBrowser","PLATFORM_ID"],"mappings":"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"}